---
name: Build and Push Docker Image
run-name: Build and Push

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: false
        type: string
        default: ""
    secrets:
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false

jobs:
  action-build-and-push:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup CI/CD Build and Push
        id: config
        run: |
          sudo apt update -qq >/dev/null 2>&1 && \
          DEBIAN_FRONTEND=noninteractive sudo apt install -y j2cli gettext moreutils >/dev/null 2>&1

          chronic j2 config.yaml -o config.yaml

          REPO_NAME=$(basename "$GITHUB_REPOSITORY")

          ENVIRONMENT="${{ inputs.ENVIRONMENT }}"
          if [ -z "$ENVIRONMENT" ]; then
            ENVIRONMENT="null"
          fi

          NAME='edelux'
          #NAME=$(yq -r ".environments.$ENVIRONMENT.docker.name//.docker.name//\"$REPO_NAME\"" config.yaml)
          CONTEXT='.'
          #CONTEXT=$(yq -r ".environments.$ENVIRONMENT.docker.filepath//.docker.filepath//\".\"" config.yaml)
          DOCKERFILE='Dockerfile.alpine'
          #DOCKERFILE=$(yq -r ".environments.$ENVIRONMENT.docker.file//.docker.filename//\"Dockerfile\"" config.yaml)
          REGISTRY='docker.io'
          #REGISTRY=$(yq -r ".environments.$ENVIRONMENT.docker.registry//.docker.registry//\"docker.io\"" config.yaml)
          PLATFORMS='linux/amd64,linux/arm64,linux/s390x,linux/ppc64le'
          #PLATFORMS=$(yq -r ".environments.$ENVIRONMENT.docker.platforms//.docker.platforms//\"linux/amd64\"" config.yaml)

          #RAW_TAGS=$(yq -r ".environments.$ENVIRONMENT.docker.tags//.docker.tags//[\"latest\"]" config.yaml)
          #TAGS_ARRAY=$(printf "$RAW_TAGS"|yq -r '(if type=="string" then [.] elif type=="array" then . else ["latest"] end) | map("'"$REGISTRY"'/'"$NAME"':" + .) | join(",")')
          TAGS_ARRAY='docker.io/edelux/dnsmasq:latest,docker.io/edelux/dnsmasq:0.0.2'

          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "context=$CONTEXT" >> $GITHUB_OUTPUT
          echo "tags=$TAGS_ARRAY" >> $GITHUB_OUTPUT
          echo "registry=$REGISTRY" >> $GITHUB_OUTPUT
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "dockerfile=$DOCKERFILE" >> $GITHUB_OUTPUT
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV

          echo "🐳 Docker Configuration:"
          echo "  Name: $NAME"
          echo "  Registry: $REGISTRY"
          echo "  Tags: $TAGS_ARRAY"
          echo "  Dockerfile: $DOCKERFILE"
          echo "  Context: $CONTEXT"
          echo "  Platforms: $PLATFORMS"

#-------------------------------------------------------------------------------------------
        ## DockerHub
      - name: Login to DockerHub
        if: ${{ steps.config.outputs.registry == 'docker.io' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

#-------------------------------------------------------------------------------------------
      ## GitHub Container Registry
      - name: Login to GitHub Container Registry
        if: ${{ steps.config.outputs.registry == 'ghcr.io' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

#-------------------------------------------------------------------------------------------
        ## AWS ECR
      - name: Setup AWS Credentials
        if: ${{ contains(steps.config.outputs.registry, 'amazonaws.com') || steps.config.outputs.registry == 'ecr' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}

      - name: Login to Amazon ECR
        if: ${{ contains(steps.config.outputs.registry, 'amazonaws.com') || steps.config.outputs.registry == 'ecr' }}
        uses: aws-actions/amazon-ecr-login@v2
#-------------------------------------------------------------------------------------------

      - name: Set Multiarch Environment
        uses: docker/setup-qemu-action@v3
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.config.outputs.tags }}
          context: ${{ steps.config.outputs.context }}
          platforms: ${{ steps.config.outputs.platforms }}
          file: ${{ steps.config.outputs.context }}/${{ steps.config.outputs.dockerfile }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=${{ steps.config.outputs.name }}
            org.opencontainers.image.description=Docker image for ${{ steps.config.outputs.name }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}

      - name: Build Summary
        run: |
          echo "## 🐳 Docker Build Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ steps.config.outputs.name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ steps.config.outputs.registry }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:** \`${{ steps.config.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** \`${{ steps.config.outputs.platforms }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Dockerfile:** \`${{ steps.config.outputs.dockerfile }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Context:** \`${{ steps.config.outputs.context }}\`" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.ENVIRONMENT }}" != "" ]; then
            echo "**Environment:** \`${{ inputs.ENVIRONMENT }}\`" >> $GITHUB_STEP_SUMMARY
          fi
...
