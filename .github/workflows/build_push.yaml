---
name: Build and Push Docker Image
run-name: Build and Push

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: false
        type: string
        default: ""

jobs:
  action-build-and-push:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup CI/CD Build and Push
        id: config
        run: |
          sudo apt update -qq >/dev/null 2>&1 && \
          DEBIAN_FRONTEND=noninteractive sudo apt install -y j2cli gettext moreutils >/dev/null 2>&1

          chronic j2 config.yaml -o config.yaml

          REPO_NAME=$(basename "$GITHUB_REPOSITORY")

          NAME=$(yq -r ".docker.name//\"$REPO_NAME\"" config.yaml)
          CONTEXT=$(yq -r ".docker.filepath//\".\"" config.yaml)
          DOCKERFILE=$(yq -r ".docker.filename//\"Dockerfile\"" config.yaml)
          REGISTRY=$(yq -r ".docker.registry//\"docker.io\"" config.yaml)
          PLATFORMS=$(yq -r ".docker.platforms//\"linux/amd64\"" config.yaml)
          BUILD_ARGS=$(yq -r ".docker.arguments//{}|to_entries|map(\"\(.key)=\(.value)\")|.[]" config.yaml)

          IFS=$'\n' read -rd '' -a tag_array <<<"$(yq -r '.docker.tags//[]|(if type=="string"then[.]elif type=="array"then . else[]end)[]' config.yaml)"

          echo "context=$CONTEXT" >> $GITHUB_OUTPUT
          echo "registry=$REGISTRY" >> $GITHUB_OUTPUT
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "dockerfile=$DOCKERFILE" >> $GITHUB_OUTPUT
          echo "ENVIRONMENT=${{ inputs.ENVIRONMENT }}" >> $GITHUB_ENV

          echo "buildargs<<EOF" >> $GITHUB_OUTPUT
          echo "$BUILD_ARGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "tags<<EOF" >> $GITHUB_OUTPUT
            for tag in "${tag_array[@]}"; do
              echo "$REGISTRY/$NAME:$tag" >> $GITHUB_OUTPUT
            done
          echo "EOF" >> $GITHUB_OUTPUT

        ## GitHub
      - name: Login to GitHub
        if: ${{ steps.config.outputs.registry == 'docker.io' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

        ## AWS ECR
      - name: Setup AWS Credentials
        if: ${{ steps.config.outputs.registry == 'ecr' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}

      - name: Login to Amazon ECR
        if: ${{ steps.config.outputs.registry == 'ecr' }}
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set Multiarch Environment
        uses: docker/setup-qemu-action@v3
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.config.outputs.tags }}
          context: ${{ steps.config.outputs.context }}
          platforms: ${{ steps.config.outputs.platforms }}
          file: ${{ steps.config.outputs.context }}/${{ steps.config.outputs.dockerfile }}
          build-args: ${{ steps.config.outputs.buildargs }}
...
