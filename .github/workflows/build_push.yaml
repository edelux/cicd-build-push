---
name: Build and Push Docker Image
run-name: Build and Push

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: false
        type: string
        default: ""
      config_path:
        required: false
        type: string
        default: config.yaml
    secrets:
      DOCKERHUB_TOKEN:
        required: false

jobs:
  action-build-and-push:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Setup CI/CD Build and Push
        id: config
        run: |
          sudo apt update -qq >/dev/null 2>&1 && \
          DEBIAN_FRONTEND=noninteractive sudo apt install -y j2cli gettext moreutils >/dev/null 2>&1

          test -f config.source && source config.source && chronic j2 config.yaml -o config.yaml
          test -z ${{ inputs.ENVIRONMENT }} && ENVIRONMENT='null' || ENVIRONMENT=${{ inputs.ENVIRONMENT }}

          USER_NAME=$(dirname $GITHUB_REPOSITORY)
          REPO_NAME=$(basename $GITHUB_REPOSITORY)

          ALIAS=$(yq -r '.environments.'"$ENVIRONMENT"'.docker.alias // .docker.alias // ""' config.yaml)
          LATEST=$(yq -r '.environments.'"$ENVIRONMENT"'.docker.latest // .docker.latest // false' config.yaml)
          VERSION=$(yq -r '.environments.'"$ENVIRONMENT"'.docker.version // .docker.version // false' config.yaml)
          NAME=$(yq -r '.environments.'"$ENVIRONMENT"'.docker.name // .docker.name // "'$REPO_NAME'"' config.yaml)
          CONTEXT=$(yq -r '.environments.'"$ENVIRONMENT"'.docker.filepath // .docker.filepath // "."' config.yaml)
          USER=$(yq -r '.environments.'"$ENVIRONMENT"'.docker.username // .docker.username // "'$USER_NAME'"' config.yaml)
          REGISTRY=$(yq -r '.environments.'"$ENVIRONMENT"'.docker.registry // .docker.registry // "docker.io"' config.yaml)
          DOCKERFILE=$(yq -r '.environments.'"$ENVIRONMENT"'.docker.filename // .docker.filename // "Dockerfile"' config.yaml)
          PLATFORMS=$(yq -r '.environments.'"$ENVIRONMENT"'.docker.platforms // .docker.platforms // "linux/amd64"' config.yaml)

          [ "$LATEST" == "true" ] && LATEST="latest"
          RAW_TAGS=$(yq -r '[.environments.'"$ENVIRONMENT"'.docker.tags // .docker.tags // []]|flatten' config.yaml)
          TAGS_ARRAY=$(yq -r '(map(tostring)+["'"$VERSION"'","'"$LATEST"'"])|map(select(. != "false" and . != null and . != ""))|unique|map("'"$REGISTRY"'/'"$USER"'/'"$NAME"':" + .)|join(",")' <<< "$RAW_TAGS")
          ALIAS_ARRAY=$(yq -r '(map(tostring)+["'"$VERSION"'","'"$LATEST"'"])|map(select(. != "false" and . != null and . != ""))|unique|map("'"$REGISTRY"'/'"$USER"'/'"$ALIAS"':" + .)|join(",")' <<< "$RAW_TAGS")
          [ -n "$ALIAS" ] && TAGS="${TAGS_ARRAY},${ALIAS_ARRAY}" || TAGS="$TAGS_ARRAY"

          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "name=$NAME" >>  $GITHUB_OUTPUT
          echo "username=$USER" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "context=$CONTEXT" >> $GITHUB_OUTPUT
          echo "registry=$REGISTRY" >> $GITHUB_OUTPUT
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "dockerfile=$DOCKERFILE" >> $GITHUB_OUTPUT
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV

          echo "🐳 Docker Configuration:"
          echo "   Name: $NAME"
          echo "   Tags: $TAGS"
          echo "   Version: $VERSION"
          echo "   Context: $CONTEXT"
          echo "   Registry: $REGISTRY"
          echo "   Platforms: $PLATFORMS"
          echo "   Dockerfile: $DOCKERFILE"

#-------------------------------------------------------------------------------------------
        ## DockerHub
      - name: Login to DockerHub
        if: ${{ steps.config.outputs.registry == 'docker.io' }}
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

#-------------------------------------------------------------------------------------------
      ## GitHub Container Registry
      - name: Login to GitHub Container Registry
        if: ${{ steps.config.outputs.registry == 'ghcr.io' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

#-------------------------------------------------------------------------------------------
        ## AWS ECR
      - name: Setup AWS Credentials
        if: ${{ contains(steps.config.outputs.registry, 'amazonaws.com') || steps.config.outputs.registry == 'ecr' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}

      - name: Login to Amazon ECR
        if: ${{ contains(steps.config.outputs.registry, 'amazonaws.com') || steps.config.outputs.registry == 'ecr' }}
        uses: aws-actions/amazon-ecr-login@v2

#-------------------------------------------------------------------------------------------
      - name: Set Multiarch Environment
        uses: docker/setup-qemu-action@v3
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          no-cache: true
          tags: ${{ steps.config.outputs.tags }}
          context: ${{ steps.config.outputs.context }}
          platforms: ${{ steps.config.outputs.platforms }}
          file: ${{ steps.config.outputs.context }}/${{ steps.config.outputs.dockerfile }}
          labels: |
            org.opencontainers.image.title=${{ steps.config.outputs.name }}
            org.opencontainers.image.description=Docker image for ${{ steps.config.outputs.name }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}

      - name: Build Summary
        run: |
          echo "## 🐳 Docker Build Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ steps.config.outputs.name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ steps.config.outputs.registry }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:** \`${{ steps.config.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** \`${{ steps.config.outputs.platforms }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Dockerfile:** \`${{ steps.config.outputs.dockerfile }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Context:** \`${{ steps.config.outputs.context }}\`" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.ENVIRONMENT }}" != "" ]; then
            echo "**Environment:** \`${{ inputs.ENVIRONMENT }}\`" >> $GITHUB_STEP_SUMMARY
          fi
...
