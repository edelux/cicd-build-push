---
name: Build and Push Docker Image
run-name: Build and Push

on:
  workflow_call:
    inputs:
      config_path:
        required: false
        type: string
        default: config.yaml
      ENVIRONMENT:
        required: true
        type: string

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup CI/CD Build and Push
        run: |
          REGISTRY=$(yq -r ".environments.${{ inputs.ENVIRONMENT }}.docker.url" config.yaml)
          APP=$(yq -r ".environments.${{ inputs.ENVIRONMENT }}.docker.arguments.APP // \"\"" config.yaml)
          CONTEXT=$(yq -r ".environments.${{ inputs.ENVIRONMENT }}.docker.filepath // \".\"" config.yaml)
          DOCKERFILE=$(yq -r ".environments.${{ inputs.ENVIRONMENT }}.docker.file // \"Dockerfile\"" config.yaml)
          VERSION=$(yq -r ".environments.${{ inputs.ENVIRONMENT }}.docker.arguments.VERSION // \"\"" config.yaml)
          PLATFORMS=$(yq -r ".environments.${{ inputs.ENVIRONMENT }}.docker.platforms // \"linux/amd64\"" config.yaml)

          if [ -z "$APP" ] || [ -z "$VERSION" ]; then
            echo "❌ ERROR: APP and/or VERSION are not defined in config.yaml for environment ${{ env.ENVIRONMENT }}"
            exit 1
          fi

          echo "context=$CONTEXT" >> $GITHUB_OUTPUT
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "dockerfile=$DOCKERFILE" >> $GITHUB_OUTPUT
          echo "image=$REGISTRY/$APP:$VERSION" >> $GITHUB_OUTPUT
          echo "ENVIRONMENT=${{ inputs.ENVIRONMENT }}" >> $GITHUB_ENV
  
      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
  
      - name: Set Multiarch Environment
        uses: docker/setup-qemu-action@v3
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.config.outputs.image }}
          context: ${{ steps.config.outputs.context }}
          platforms: ${{ steps.config.outputs.platforms }}
          file: ${{ steps.config.outputs.context }}/${{ steps.config.outputs.dockerfile }}
...
