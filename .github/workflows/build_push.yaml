---
name: Build and Push Docker Image
run-name: Build and Push

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: false
        type: string
        default: ""
    secrets:
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false

jobs:
  action-build-and-push:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup CI/CD Build and Push
        id: config
        run: |
          sudo apt update -qq >/dev/null 2>&1 && \
          DEBIAN_FRONTEND=noninteractive sudo apt install -y j2cli gettext moreutils >/dev/null 2>&1

          chronic j2 config.yaml -o config.yaml

          #NAME='edelux'
          #ENVIRONMENT='null'
          #CONTEXT='.'
          #DOCKERFILE='Dockerfile.alpine'
          #REGISTRY='docker.io'
          #PLATFORMS='linux/amd64,linux/arm64,linux/s390x,linux/ppc64le'
          #TAGS_ARRAY='docker.io/edelux/dnsmasq:latest,docker.io/edelux/dnsmasq:0.0.4a'

          REPO_NAME=$(basename "$GITHUB_REPOSITORY")
          test -z ${{ inputs.ENVIRONMENT }} && ENVIRONMENT='null' || ENVIRONMENT=${{ inputs.ENVIRONMENT }}
          NAME=$(yq -r ".environments.$ENVIRONMENT.docker.name//.docker.name//\"$REPO_NAME\"" config.yaml)
          #CONTEXT=$(yq -r ".environments.$ENVIRONMENT.docker.filepath//.docker.filepath//\".\"" config.yaml)
          #DOCKERFILE=$(yq -r ".environments.$ENVIRONMENT.docker.file//.docker.filename//\"Dockerfile\"" config.yaml)
          #REGISTRY=$(yq -r ".environments.$ENVIRONMENT.docker.registry//.docker.registry//\"docker.io\"" config.yaml)
          #PLATFORMS=$(yq -r ".environments.$ENVIRONMENT.docker.platforms//.docker.platforms//\"linux/amd64\"" config.yaml)
          #RAW_TAGS=$(yq -r ".environments.$ENVIRONMENT.docker.tags//.docker.tags//[\"latest\"]" config.yaml)
          #TAGS_ARRAY=$(printf "$RAW_TAGS"|yq -r '(if type=="string" then [.] elif type=="array" then . else ["latest"] end) | map("'"$REGISTRY"'/'"$NAME"':" + .) | join(",")')

          echo "üê≥Docker Configuration:"
          echo "  Repo: $REPO_NAME"
          echo "  Environment: $ENVIRONMENT"
          echo "  Input env: ${{ inputs.ENVIRONMENT }}"
          echo "  Name: $NAME"
          #echo "  Registry: $REGISTRY"
          #echo "  Tags: $TAGS_ARRAY"
          #echo "  Dockerfile: $DOCKERFILE"
          #echo "  Context: $CONTEXT"
          #echo "  Platforms: $PLATFORMS"
          ls -la
          cat config.yaml
